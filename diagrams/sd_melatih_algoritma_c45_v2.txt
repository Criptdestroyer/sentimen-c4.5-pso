@startuml
hide footbox
title Melatih Algoritma C4.5\n

actor Peneliti
boundary AppWindow
control MainControl
control C45
control TFIDF
entity "db : Database"

activate Peneliti
Peneliti -> AppWindow : foldData()
activate AppWindow
AppWindow -> MainControl : foldData(k)
activate MainControl
MainControl -> "db : Database" : select("preprocessed_data")
activate "db : Database"
"db : Database" --> MainControl : preprocessed data
loop "data in preprocessed data"
MainControl -> "db : Database" : multiplesql("update data fold number")
end
MainControl --> AppWindow : foldedData
deactivate "db : Database"
deactivate MainControl
deactivate AppWindow

Peneliti -> AppWindow : trainModel()
activate AppWindow
AppWindow -> MainControl : trainModel()
activate MainControl
MainControl -> "db : Database" : select("preprocessed_data")
activate "db : Database"
"db : Database" --> MainControl : preprocessed data
deactivate "db : Database"

loop i < k
create C45
MainControl -> C45 : << C45(trainData, testData, i) >>
MainControl -> C45 : constructTree()
activate C45
C45 -> C45 : calculateTotalEntropy()
C45 -> C45 : calculateWeights()
activate C45
C45 -> C45 : constructAttributes()
activate C45

loop attribute in attributes
C45 -> "db : Database" : multiplesql("insert into attributes")
end
deactivate C45

create TFIDF
C45 -> TFIDF : << TFIDF(trainData, attributes) >>
C45 -> TFIDF : calculateTfIdf()
activate TFIDF
TFIDF -> TFIDF : calculateIdf()

loop document in documents
TFIDF -> TFIDF : tf()
activate TFIDF
TFIDF --> TFIDF : tf
deactivate TFIDF
end

C45 -> TFIDF : saveWeights()
deactivate C45
loop weight in weights
TFIDF -> "db : Database" : multiplesql("insert into weights")
end
deactivate TFIDF

C45 -> C45 : getDocumentsVector()
activate C45
C45 -> "db : Database" : query("select from weights")
activate "db : Database"
"db : Database" --> C45 : weights
deactivate "db : Database"
deactivate C45
C45 -> C45 : getThresholdValue()
activate C45

loop attribute in attributes
C45 -> C45 : getPossibleThresholds(attribute, excludedData)
activate C45
C45 --> C45 : possibleThresholds
deactivate C45

loop threshold in possibleThresholds
C45 -> C45 : calculateAttributeGain(attribute, threshold, excludedData)
activate C45
C45 -> C45 : getChildNodes(attribute, threshold, excludedData)
activate C45
C45 --> C45 : left, right
deactivate C45
C45 --> C45 : gain
deactivate C45
end

opt len(thresholdGain) > 0

alt tree is None
C45 -> "db : Database" : multiplesql("insert root node into tree")
else
C45 -> "db : Database" : multiplesql("insert child node into tree")
end

C45 -> C45 : getChildNodes(attribute, threshold, excludedData)
activate C45
C45 --> C45 : left, right, leftData, rightData
deactivate C45

alt len(unique(labels)) equals 1
C45 -> "db : Database" : multiplesql("update this node set type = 'label'")
else

opt leftDataCount > 0
C45 -> C45 : getThresholdValue(excludedData, node, left)
end

opt rightDataCount > 0
C45 -> C45 : getThresholdValue(excludedData, node, right)
end

end

end
deactivate C45

end

end
MainControl --> AppWindow : classifiers
deactivate C45
@enduml